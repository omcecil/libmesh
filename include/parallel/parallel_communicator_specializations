
// This file is only for use within communicator.h
#ifdef LIBMESH_COMMUNICATOR_H

// Some of these specializations are defined in an MPI-independent way

    bool verify(const std::string & r) const;

    bool verify(const bool & r) const;

    template <typename T, typename A>
    bool semiverify(const std::vector<T,A> * r) const;

    bool semiverify(const std::string * r) const;

    bool semiverify(const bool * r) const;

    void min(bool &r) const;

    template <typename T, typename A>
    void min(std::vector<T,A> &r) const;

    template <typename A>
    void min(std::vector<bool,A> &r) const;

    void minloc(bool &r,
                unsigned int &min_id) const;

    template <typename A1, typename A2>
    void minloc(std::vector<bool,A1> &r,
                std::vector<unsigned int,A2> &min_id) const;

    void max(bool &r) const;

    template <typename T, typename A>
    void max(std::vector<T,A> &r) const;

    template <typename A>
    void max(std::vector<bool,A> &r) const;

    void maxloc(bool &r,
                unsigned int &max_id) const;

    template <typename A1, typename A2>
    void maxloc(std::vector<bool,A1> &r,
                std::vector<unsigned int,A2> &max_id) const;

    template <typename T, typename A>
    void sum(std::vector<T,A> &r) const;

    template <typename T>
    void sum(std::complex<T> &r) const;

    template <typename T, typename A>
    void sum(std::vector<std::complex<T>,A> &r) const;

    template <typename T, typename C, typename A>
    void set_union(std::set<T,C,A> &data,
                   const unsigned int root_id) const;

    template <typename T, typename C, typename A>
    void set_union(std::set<T,C,A> &data) const;

    template <typename T1, typename T2, typename C, typename A>
    void set_union(std::map<T1,T2,C,A> &data,
                   const unsigned int root_id) const;

    template <typename T1, typename T2, typename C, typename A>
    void set_union(std::map<T1,T2,C,A> &data) const;

// We only need to bother with many of these specializations if we're
// actually in parallel.
#ifdef LIBMESH_HAVE_MPI
    template<typename T>
    void send (const unsigned int dest_processor_id,
               const std::basic_string<T> & buf,
               const MessageTag &tag=no_tag) const;
 
    template<typename T>
    void send (const unsigned int dest_processor_id,
               const std::basic_string<T> & buf,
               Request &req,
               const MessageTag &tag=no_tag) const;
 
    template <typename T, typename C, typename A>
    void send (const unsigned int dest_processor_id,
               const std::set<T,C,A> & buf,
               const MessageTag &tag=no_tag) const;

    template <typename T, typename C, typename A>
    void send (const unsigned int dest_processor_id,
               const std::set<T,C,A> & buf,
               Request &req,
               const MessageTag &tag=no_tag) const;

    template <typename T, typename C, typename A>
    void send (const unsigned int dest_processor_id,
               const std::set<T,C,A> & buf,
               const DataType &type,
               const MessageTag &tag=no_tag) const;

    template <typename T, typename C, typename A>
    void send (const unsigned int dest_processor_id,
               const std::set<T,C,A> & buf,
               const DataType &type,
               Request &req,
               const MessageTag &tag=no_tag) const;

    template <typename T, typename A>
    void send (const unsigned int dest_processor_id,
               const std::vector<T,A> & buf,
               const MessageTag &tag=no_tag) const;

    template <typename T, typename A>
    void send (const unsigned int dest_processor_id,
               const std::vector<T,A> & buf,
               Request &req,
               const MessageTag &tag=no_tag) const;

    template <typename T, typename A>
    void send (const unsigned int dest_processor_id,
               const std::vector<T,A> & buf,
               const DataType &type,
               const MessageTag &tag=no_tag) const;

    template <typename T, typename A>
    void send (const unsigned int dest_processor_id,
               const std::vector<T,A> & buf,
               const DataType &type,
               Request &req,
               const MessageTag &tag=no_tag) const;

    template <typename T, typename A1, typename A2>
    void send (const unsigned int dest_processor_id,
               const std::vector<std::vector<T,A1>,A2> & buf,
               const MessageTag &tag=no_tag) const;

    template <typename T, typename A1, typename A2>
    void send (const unsigned int dest_processor_id,
               const std::vector<std::vector<T,A1>,A2> & buf,
               Request &req,
               const MessageTag &tag=no_tag) const;

    template <typename T, typename A1, typename A2>
    void send (const unsigned int dest_processor_id,
               const std::vector<std::vector<T,A1>,A2> & buf,
               const DataType &type,
               const MessageTag &tag=no_tag) const;

    template <typename T, typename A1, typename A2>
    void send (const unsigned int dest_processor_id,
               const std::vector<std::vector<T,A1>,A2> & buf,
               const DataType &type,
               Request &req,
               const MessageTag &tag=no_tag) const;

    template<typename T>
    Status receive (const unsigned int src_processor_id,
                    std::basic_string<T> &buf,
                    const MessageTag &tag=any_tag) const;

    template<typename T>
    void receive (const unsigned int src_processor_id,
                  std::basic_string<T> &buf,
                  Request &req,
                  const MessageTag &tag=any_tag) const;

    template <typename T, typename C, typename A>
    Status receive (const unsigned int src_processor_id,
                    std::set<T,C,A> &buf,
                    const MessageTag &tag=any_tag) const;

    template <typename T, typename C, typename A>
    void receive (const unsigned int src_processor_id,
                  std::set<T,C,A> &buf,
                  Request &req,
                  const MessageTag &tag=any_tag) const;

    template <typename T, typename C, typename A>
    Status receive (const unsigned int src_processor_id,
                    std::set<T,C,A> &buf,
                    const DataType &type,
                    const MessageTag &tag=any_tag) const;

    template <typename T, typename C, typename A>
    void receive (const unsigned int src_processor_id,
                  std::set<T,C,A> &buf,
                  const DataType &type,
                  Request &req,
                  const MessageTag &tag=any_tag) const;
 
    template <typename T, typename A>
    Status receive (const unsigned int src_processor_id,
                    std::vector<T,A> &buf,
                    const MessageTag &tag=any_tag) const;

    template <typename T, typename A>
    void receive (const unsigned int src_processor_id,
                  std::vector<T,A> &buf,
                  Request &req,
                  const MessageTag &tag=any_tag) const;

    template <typename T, typename A>
    Status receive (const unsigned int src_processor_id,
                    std::vector<T,A> &buf,
                    const DataType &type,
                    const MessageTag &tag=any_tag) const;

    template <typename T, typename A>
    void receive (const unsigned int src_processor_id,
                  std::vector<T,A> &buf,
                  const DataType &type,
                  Request &req,
                  const MessageTag &tag=any_tag) const;

    template <typename T, typename A1, typename A2>
    Status receive (const unsigned int src_processor_id,
                    std::vector<std::vector<T,A1>,A2> &buf,
                    const MessageTag &tag=any_tag) const;

    template<typename T, typename A1, typename A2>
    void receive (const unsigned int src_processor_id,
                  std::vector<std::vector<T,A1>,A2> &buf,
                  Request &req,
                  const MessageTag &tag=any_tag) const;

    template <typename T, typename A1, typename A2>
    Status receive (const unsigned int src_processor_id,
                    std::vector<std::vector<T,A1>,A2> &buf,
                    const DataType &type,
                    const MessageTag &tag=any_tag) const;

// FIXME - non-blocking receive of vector-of-vectors is currently unimplemented
/*
    template <typename T, typename A1, typename A2>
    void receive (const unsigned int src_processor_id,
                  std::vector<std::vector<T,A1>,A2> &buf,
                  const DataType &type,
                  Request &req,
                  const MessageTag &tag=any_tag) const;
*/

    template <typename T>
    void broadcast(std::basic_string<T> &data,
                   const unsigned int root_id=0) const;

    template <typename T, typename A>
    void broadcast(std::vector<T,A> &data,
                   const unsigned int root_id=0) const;

    template <typename T, typename A>
    void broadcast(std::vector<std::basic_string<T>,A> &data,
                   const unsigned int root_id=0) const;

    template <typename T, typename C, typename A>
    void broadcast(std::set<T,C,A> &data,
                   const unsigned int root_id=0) const;

    template <typename T1, typename T2, typename C, typename A>
    void broadcast(std::map<T1,T2,C,A> &data,
                   const unsigned int root_id=0) const;

    // In new overloaded function template entries we have to
    // re-specify the default arguments
    template <typename T1, typename T2, typename A1, typename A2>
    void send_receive(const unsigned int dest_processor_id,
                      const std::vector<T1,A1> & send,
                      const DataType &type1,
                      const unsigned int source_processor_id,
                      std::vector<T2,A2> &recv,
                      const DataType &type2,
                      const MessageTag &send_tag = no_tag,
                      const MessageTag &recv_tag = any_tag) const;

    template <typename T1, typename T2, typename A1, typename A2>
    void send_receive(const unsigned int dest_processor_id,
                      const std::vector<T1,A1> & send,
                      const unsigned int source_processor_id,
                      std::vector<T2,A2> &recv,
                      const MessageTag &send_tag = no_tag,
                      const MessageTag &recv_tag = any_tag) const;

    // We specialize on the T1==T2 case so that we can handle
    // send_receive-to-self with a plain copy rather than going through
    // MPI.
    template <typename T, typename A>
    void send_receive(const unsigned int dest_processor_id,
                      const std::vector<T,A> & send,
                      const unsigned int source_processor_id,
                      std::vector<T,A> &recv,
                      const MessageTag &send_tag = no_tag,
                      const MessageTag &recv_tag = any_tag) const;

    template <typename T1, typename T2, typename A1, typename A2, typename A3, typename A4>
    void send_receive(const unsigned int dest_processor_id,
                      const std::vector<std::vector<T1,A1>,A2> & send,
                      const unsigned int source_processor_id,
                      std::vector<std::vector<T2,A3>,A4> &recv,
                      const MessageTag &send_tag = no_tag,
                      const MessageTag &recv_tag = any_tag) const;

    template <typename T, typename A1, typename A2>
    void send_receive(const unsigned int dest_processor_id,
                      const std::vector<std::vector<T,A1>,A2> & send,
                      const unsigned int source_processor_id,
                      std::vector<std::vector<T,A1>,A2> &recv,
                      const MessageTag &send_tag = no_tag,
                      const MessageTag &recv_tag = any_tag) const;
#endif // LIBMESH_HAVE_MPI

#endif // LIBMESH_COMMUNICATOR_H
